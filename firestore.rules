rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Tweets collection
    match /tweets/{tweetId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.createdBy == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['totalWatchers', 'userWatching'])
      );
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.tmdbId is number
        && request.resource.data.title is string;
      allow update: if isSignedIn() && (
        resource.data.userId == request.auth.uid ||
        // Allow updating likes array only
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])
      );
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Watchlists collection
    match /watchlists/{watchlistId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // User reviews subcollection
    match /users/{userId}/reviews/{reviewId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }

    // Ratings collection for Tinder-style app
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.tmdbId is string
        && request.resource.data.title is string
        && request.resource.data.mediaType in ['movie', 'tv']
        && request.resource.data.rating in ['love', 'hate', 'meh'];
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // AI Recommendations cache collection
    match /recommendations/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == userId;
    }
  }
}
